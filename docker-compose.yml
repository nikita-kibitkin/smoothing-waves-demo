services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    ports: ["2181:2181"]
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.7
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"

  pg:
    image: bitnami/postgresql:16
    ports: [ "5433:5432" ]
    environment:
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=postgres
      - POSTGRESQL_DATABASE=postgres

      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=postgres
      - POSTGRESQL_REPLICATION_PASSWORD=postgres

      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - POSTGRESQL_SYNCHRONOUS_COMMIT=remote_apply

      - POSTGRESQL_WAL_LEVEL=replica
      - POSTGRESQL_MAX_WAL_SENDERS=10
      - POSTGRESQL_MAX_REPLICATION_SLOTS=10
      - POSTGRESQL_SHARED_BUFFERS=256MB
      - POSTGRESQL_LOG_CONNECTIONS=true
      - POSTGRESQL_LOG_DISCONNECTIONS=true
      - POSTGRESQL_EXTRA_FLAGS=-c listen_addresses=* -c effective_cache_size=2GB -c log_autovacuum_min_duration=0 -c checkpoint_timeout=30min -c checkpoint_completion_target=0.9 -c wal_level=replica -c max_wal_size=8GB -c max_wal_senders=10 -c max_replication_slots=10 -c synchronous_commit=remote_apply -c synchronous_standby_names=standby1 -c hba_file=/opt/bitnami/postgresql/conf/pg_hba.conf
    volumes:
      - pg_data:/bitnami/postgresql
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf

  pg_standby:
    image: bitnami/postgresql:16
    depends_on: [ pg ]
    cap_add: [ "NET_ADMIN" ]      # право на qdisc
    environment:
      # Bitnami-реплика (оставьте те же значения, что у вас)
      - POSTGRES_REPLICATION_MODE=slave
      - POSTGRES_REPLICATION_USER=postgres
      - POSTGRES_REPLICATION_PASSWORD=postgres
      - POSTGRES_MASTER_HOST=pg
      - POSTGRES_MASTER_PORT_NUMBER=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DATABASE=postgres
      - POSTGRES_CLUSTER_APP_NAME=standby1
      - POSTGRES_SYNCHRONOUS_COMMIT=off
    volumes:
      - pg_standby_data:/bitnami/postgresql
      - ./pg_hba.conf:/opt/bitnami/postgresql/conf/pg_hba.conf'

  app:
    build: .
    ports: ["8080:8080"]
    depends_on:
      - kafka
      - pg
    environment:
      # fix heap to the memory limit with a small reserve
      - JAVA_TOOL_OPTIONS=-Xms1g -Xmx1g -XX:+AlwaysPreTouch
      - DURATION_MINUTES
      - EXPERIMENT_ID
      - BACKPRESSURE_ENABLED
      - BACKPRESSURE_CREDITS
      - DB_ENABLED
      - HIGH_RATE
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2g
    cpuset: "0-1"

  prometheus:
    image: prom/prometheus:v2.53.0
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.4.1
    ports: ["3000:3000"]
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards

#  loki:
#    image: grafana/loki:3.0.0
#    user: "0:0"
#    command: -config.file=/etc/loki/config.yml
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./loki-config.yml:/etc/loki/config.yml
#      - ./loki-data:/loki
#
#  promtail:
#    image: grafana/promtail:3.0.0
#    depends_on:
#      - loki
#    command: -config.file=/etc/promtail/config.yml
#    volumes:
#      # Если логи приложений идут в stdout Docker-контейнеров:
#      - /var/lib/docker/containers:/var/lib/docker/containers:ro
#      - /var/log:/var/log:ro
#      - ./promtail-config.yml:/etc/promtail/config.yml

volumes:
   pg_data:
   pg_standby_data: